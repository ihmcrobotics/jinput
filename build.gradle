plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id("us.ihmc.ihmc-cd") version "1.8"
}

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '190214'

repositories {
	maven {
		url "https://dl.bintray.com/ihmcrobotics/maven-release"
	}

	mavenCentral()
}

dependencies {
	compile("net.java.jutils:jutils:1.0.0")
	compile("org.apache.commons:commons-lang3:3.9")
	compile("us.ihmc:ihmc-native-library-loader:1.1")
	runtime("net.java.jinput:jinput-platform:2.0.6:natives-windows")
	runtime("net.java.jinput:jinput-platform:2.0.6:natives-osx")
	runtime("net.java.jinput:jinput-platform:2.0.6:natives-linux")
}

sourceSets {
    main {
        java {
            srcDirs = ['applet/src',
                       'coreAPI/src/java',
                       'plugins/awt/src',
                       'plugins/linux/src/java',
                       'plugins/OSX/src/java',
                       'plugins/windows/src/java',
                       'plugins/wintab/src/java']
        }
    }
}

test.finalizedBy("addPhonyTestXml")

task addPhonyTestXml {
   doLast {
      def testDir = file("$buildDir/test-results/test")
      project.mkdir(testDir)

      def noTestsFoundFile = file("$testDir/TEST-us.ihmc.NoTestsFoundTest.xml")
      noTestsFoundFile.text =
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                  "<testsuite name=\"us.ihmc.NoTestsFoundTest\" tests=\"1\" skipped=\"0\" failures=\"0\" " +
                  "errors=\"0\" timestamp=\"2018-10-19T15:10:58\" hostname=\"duncan-ihmc\" time=\"0.01\">" +
                  "<properties/>" +
                  "<testcase name=\"noTestsFoundTest\" classname=\"us.ihmc.NoTestsFoundTest\" time=\"0.01\"/>" +
                  "<system-out>This is a phony test to make CI builds pass when a project does not contain any tests.</system-out>" +
                  "<system-err><![CDATA[]]></system-err>" +
                  "</testsuite>"
   }
}

jar {
   manifest {
      attributes(
      "Created-By": "IHMC Gradle Build Script",
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": "Java Game Initiative")
   }
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
}

publishing {
	publications {
		mavenJava(MavenPublication) {

			groupId 'us.ihmc.thirdparty.jinput'
			artifactId 'jinput'
			version "$version"
			from components.java

			artifact sourceJar {
				classifier "sources"
			}
		}

	}
}

bintray {
    user = project.hasProperty("bintrayUsername") ? project.bintrayUsername : "invalid"
    key = project.hasProperty("bintrayApiKey") ? project.bintrayApiKey : "invalid"

    if (user.equals("invalid")) {
        project.logger.debug("Bintray user name property not set. Please set the 'bintrayUsername' property in ~/.gradle/gradle.properties. See https://github.com/bintray/gradle-bintray-plugin")
    }

    if (key.equals("invalid")) {
        project.logger.debug("Bintray API key property not set. Please set the 'bintrayApiKey' property in ~/.gradle/gradle.properties. See https://github.com/bintray/gradle-bintray-plugin")
    }

    dryRun = false
    publish = false

    publications = ["mavenJava"]

    pkg {
        repo = "maven-vendor"
        userOrg = "ihmcrobotics"
        name = "jinput"
        desc = "Maven repository providing a multi-arch JInput artifact"
				vcsUrl = "https://github.com/ihmcrobotics/ihmc-jinput-multi-arch.git"

        licenses = ['BSD 2-Clause']
        labels = ['java', 'jinput', 'vendored']

        version {
            name = project.version
            released = new Date()
        }
    }
}
